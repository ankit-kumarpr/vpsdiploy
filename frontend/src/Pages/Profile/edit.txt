import axios from "axios";
import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { FaUser } from "react-icons/fa";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "./profile.css";

const UserProfile = () => {
  const token = sessionStorage.getItem("token");
  const [data, setData] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [editedData, setEditedData] = useState({});

  const fetchUserData = async () => {
    const headers = {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`,
    };
    try {
      const response = await axios.get(
        "https://lawyerbackend-qrqa.onrender.com/lawapi/auth/profile",
        { headers }
      );
      setData(response.data.data);
    } catch (error) {
      console.error("Error fetching user profile:", error);
      toast.error("Failed to load profile.");
    }
  };

  useEffect(() => {
    fetchUserData();
  }, []);

const handleEditClick = () => {
  setEditedData({
    name: data.name,
    phone: data.phone,
    email: data.email,
    city: data.city,
    experience: data.experience,
    specialization: data.specialization,
    consultation_fees: data.consultation_fees,
    licenseNumber: data.licenseNumber,
    addressline: data.addressline,
  });
  setShowModal(true);
};


  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEditedData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSaveProfile = async () => {
    try {
      const response = await axios.post(
        `https://lawyerbackend-qrqa.onrender.com/lawapi/common/updatelawyer/${data.lawyerId}`,
        editedData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data?.success) {
        toast.success("Profile updated successfully");
        setData((prev) => ({
          ...prev,
          ...editedData,
        }));
        setShowModal(false);
      } else {
        toast.error(response.data?.message || "Failed to update profile");
      }
    } catch (error) {
      console.error("Error updating profile:", error);
      toast.error("Update failed: " + (error.response?.data?.message || "Network Error"));
    }
  };

  const handleStatusUpdate = async () => {
    try {
      await axios.post(
        `https://lawyerbackend-qrqa.onrender.com/lawapi/common/updatelawyer/${data.lawyerId}`,
        { status: data.status },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );
      toast.success("Status updated successfully!");
    } catch (error) {
      console.error("Error updating status:", error);
      toast.error("Failed to update status.");
    }
  };

  if (!data) {
    return (
      <div className="loading-container">
        <div className="loading-text">Loading profile...</div>
      </div>
    );
  }

  return (
    <div className="profile-container">
      {/* Left Panel */}
      <motion.div
        className="profile-card left"
        initial={{ opacity: 0, x: -30 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="profile-header">
          <div className="profile-header-icon">
            <FaUser size={24} />
          </div>
          <div>
            <h3 className="profile-name">{data.name}</h3>
            <p className="profile-role">{data.role}</p>
          </div>
        </div>
        <div className="profile-details">
          <MiniRow  label={data.email} />
          <MiniRow  label={data.phone} />
          {/* <MiniRow  label={data.city} /> */}
          <MiniRow  label={`Experience: ${data.experience} yrs`} />
          <MiniRow  label={`Specialization: ${data.specialization}`} />
          {/* <MiniRow  label={`Fees: ₹${data.consultation_fees}`} /> */}
          <MiniRow  label={`License: ${data.licenseNumber}`} />
          <MiniRow  label={`Verified: ${data.isverified ? "Yes" : "No"}`} />
        </div>
      </motion.div>

      {/* Right Panel */}
      <motion.div
        className="profile-card right"
        initial={{ opacity: 0, x: 30 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="right-header">
          <h2>{data.name}</h2>
          <span>{data.role}</span>
          <div className="status-update-row">
            <div className="status-indicator">
              <span className={`status-dot ${data.status.toLowerCase()}`}></span>
              <strong>{data.status}</strong>
            </div>
            <select
              value={data.status}
              onChange={(e) => setData({ ...data, status: e.target.value })}
              className="status-dropdown"
            >
              <option value="online">Online</option>
              <option value="offline">Offline</option>
              <option value="busy">Busy</option>
            </select>
            <button className="save-btn" onClick={handleStatusUpdate}>
              Save Status
            </button>
          </div>
        </div>

        <div className="section">
          <h4>Profile Info</h4>
          <InfoRow label="Phone" value={data.phone} />
          <InfoRow label="City" value={data.city} />
          <InfoRow label="Experience" value={`${data.experience} years`} />
          <InfoRow label="Specialization" value={data.specialization} />
          <InfoRow label="Consultation Fees" value={`₹${data.consultation_fees}`} />
          <InfoRow label="Address" value={data.addressline || "N/A"} />
          <button className="edit-btn" onClick={handleEditClick}>Edit</button>
        </div>

        <div className="section">
          <h4>Institution Info</h4>
          <InfoRow label="Lawyer ID" value={data.lawyerId} />
          <InfoRow label="Email" value={data.email} />
          <InfoRow label="Joined On" value={new Date(data.created_at).toDateString()} />
        </div>
      </motion.div>

      {/* Modal */}
      {showModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h2>Edit Profile</h2>
          <form
  onSubmit={(e) => {
    e.preventDefault();
    handleSaveProfile();
  }}
>
  <label>Name:
    <input name="name" value={editedData.name} onChange={handleInputChange} />
  </label>
  <label>Phone:
    <input name="phone" value={editedData.phone} onChange={handleInputChange} />
  </label>
  <label>Email:
    <input name="email" value={editedData.email} onChange={handleInputChange} />
  </label>
  <label>City:
    <input name="city" value={editedData.city} onChange={handleInputChange} />
  </label>
  <label>Experience:
    <input name="experience" value={editedData.experience} onChange={handleInputChange} />
  </label>
  <label>Specialization:
    <input name="specialization" value={editedData.specialization} onChange={handleInputChange} />
  </label>
  <label>Consultation Fees:
    <input name="consultation_fees" value={editedData.consultation_fees} onChange={handleInputChange} />
  </label>
  <label>License Number:
    <input name="licenseNumber" value={editedData.licenseNumber} onChange={handleInputChange} />
  </label>
  <label>Address:
    <input name="addressline" value={editedData.addressline || ""} onChange={handleInputChange} />
  </label>

  <div className="modal-actions">
    <button type="submit" className="save-btn">Save</button>
    <button type="button" className="cancel-btn" onClick={() => setShowModal(false)}>Cancel</button>
  </div>
</form>

          </div>
        </div>
      )}

      <ToastContainer position="top-right" autoClose={3000} />
    </div>
  );
};

const MiniRow = ({ icon, label }) => (
  <div className="mini-row">
    <span>{icon}</span> <span>{label}</span>
  </div>
);

const InfoRow = ({ label, value }) => (
  <div className="info-row">
    <span className="label">{label}</span>
    <span className="value">{value}</span>
  </div>
);

export default UserProfile;
